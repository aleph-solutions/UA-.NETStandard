/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.3, using .NET Server 2.6.0 template (version 2)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by albertopiovan <alberto.piovan@aleph.solutions>
** </auto-generated>
**
** Copyright (c) 2006-2020 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://pmi.com/UA/TMCPlus
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 17.04.2020
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;
using Opc.Ua;
using System.Diagnostics;
using TMCGroup.TMC;

namespace PMI.TMCPlus
{
    #region PMI_MaterialStateEnumeration
    /// <summary>
    /// The possible encodings for a PMI_MaterialStateEnumeration value.
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlus)]
    public enum PMI_MaterialStateEnumeration
    {
        [EnumMember(Value = "Good_0")]
        Good = 0,
        [EnumMember(Value = "LeftOver_1")]
        LeftOver = 1,
        [EnumMember(Value = "Defected_2")]
        Defected = 2,
    }

    #region PMI_MaterialStateEnumerationCollection Class
    /// <summary>
    /// A collection of PMI_MaterialStateEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class PMI_MaterialStateEnumerationCollection : List<PMI_MaterialStateEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_MaterialStateEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_MaterialStateEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_MaterialStateEnumerationCollection(IEnumerable<PMI_MaterialStateEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_MaterialStateEnumerationCollection(PMI_MaterialStateEnumeration[] values)
        {
            if (values != null)
            {
                return new PMI_MaterialStateEnumerationCollection(values);
            }

            return new PMI_MaterialStateEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_MaterialStateEnumeration[](PMI_MaterialStateEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_MaterialStateEnumerationCollection clone = new PMI_MaterialStateEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_MaterialStateEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region PMI_StorageMixingLogicEnumeration
    /// <summary>
    /// The possible encodings for a PMI_StorageMixingLogicEnumeration value.
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlus)]
    public enum PMI_StorageMixingLogicEnumeration
    {
        /// <summary>
        /// A different material can be added without prior emptying the buffer storage.
        /// </summary>
        [EnumMember(Value = "Mixing_0")]
        Mixing = 0,
        /// <summary>
        /// The buffer storage shall be emptied before a material with different ID is loaded to the buffer storage.
        /// </summary>
        [EnumMember(Value = "NonMixingByProduct_1")]
        NonMixingByProduct = 1,
        /// <summary>
        /// The buffer storage shall be emptied before a material with different BatchId is loaded to the buffer storage.
        /// </summary>
        [EnumMember(Value = "NonMixingByBatch_2")]
        NonMixingByBatch = 2,
    }

    #region PMI_StorageMixingLogicEnumerationCollection Class
    /// <summary>
    /// A collection of PMI_StorageMixingLogicEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class PMI_StorageMixingLogicEnumerationCollection : List<PMI_StorageMixingLogicEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_StorageMixingLogicEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_StorageMixingLogicEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_StorageMixingLogicEnumerationCollection(IEnumerable<PMI_StorageMixingLogicEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_StorageMixingLogicEnumerationCollection(PMI_StorageMixingLogicEnumeration[] values)
        {
            if (values != null)
            {
                return new PMI_StorageMixingLogicEnumerationCollection(values);
            }

            return new PMI_StorageMixingLogicEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_StorageMixingLogicEnumeration[](PMI_StorageMixingLogicEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_StorageMixingLogicEnumerationCollection clone = new PMI_StorageMixingLogicEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_StorageMixingLogicEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region PMI_BoMEntryType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlusXsd)]
    public partial class PMI_BoMEntryType : IEncodeable
    {
        #region Constructors
        public PMI_BoMEntryType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Id = null;
            m_AssemblyId = null;
            m_Material = null;
            m_MaterialAttributes = null;
            m_Quantity = 0.0;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Id", IsRequired = false, Order = 1)]
        public string Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }
        [DataMember(Name = "AssemblyId", IsRequired = false, Order = 2)]
        public string AssemblyId
        {
            get
            {
                return m_AssemblyId;
            }
            set
            {
                m_AssemblyId = value;
            }
        }
        [DataMember(Name = "Material", IsRequired = false, Order = 3)]
        public MaterialType Material
        {
            get
            {
                return m_Material;
            }
            set
            {
                m_Material = value;
            }
        }
        [DataMember(Name = "MaterialAttributes", IsRequired = false, Order = 4)]
        public PMI_MaterialAttributesType MaterialAttributes
        {
            get
            {
                return m_MaterialAttributes;
            }
            set
            {
                m_MaterialAttributes = value;
            }
        }
        [DataMember(Name = "Quantity", IsRequired = false, Order = 5)]
        public double Quantity
        {
            get
            {
                return m_Quantity;
            }
            set
            {
                m_Quantity = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PMI_BoMEntryType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PMI_BoMEntryType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PMI_BoMEntryType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCPlusXsd);

            encoder.WriteString("Id", Id);
            encoder.WriteString("AssemblyId", AssemblyId);
            encoder.WriteEncodeable("Material", Material, typeof(MaterialType));
            encoder.WriteEncodeable("MaterialAttributes", MaterialAttributes, typeof(PMI_MaterialAttributesType));
            encoder.WriteDouble("Quantity", Quantity);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCPlusXsd);
            Id = decoder.ReadString("Id");
            AssemblyId = decoder.ReadString("AssemblyId");
            Material = (MaterialType) decoder.ReadEncodeable("Material", typeof(MaterialType));
            MaterialAttributes = (PMI_MaterialAttributesType) decoder.ReadEncodeable("MaterialAttributes", typeof(PMI_MaterialAttributesType));
            Quantity = decoder.ReadDouble("Quantity");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PMI_BoMEntryType value = encodeable as PMI_BoMEntryType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Id, value.m_Id)) return false;
            if (!Utils.IsEqual(m_AssemblyId, value.m_AssemblyId)) return false;
            if (!Utils.IsEqual(m_Material, value.m_Material)) return false;
            if (!Utils.IsEqual(m_MaterialAttributes, value.m_MaterialAttributes)) return false;
            if (!Utils.IsEqual(m_Quantity, value.m_Quantity)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            PMI_BoMEntryType clone = (PMI_BoMEntryType)this.MemberwiseClone();

            clone.m_Id = (string)Utils.Clone(this.m_Id);
            clone.m_AssemblyId = (string)Utils.Clone(this.m_AssemblyId);
            clone.m_Material = (MaterialType)Utils.Clone(this.m_Material);
            clone.m_MaterialAttributes = (PMI_MaterialAttributesType)Utils.Clone(this.m_MaterialAttributes);
            clone.m_Quantity = (double)Utils.Clone(this.m_Quantity);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Id;
        private string m_AssemblyId;
        private MaterialType m_Material;
        private PMI_MaterialAttributesType m_MaterialAttributes;
        private double m_Quantity;
        #endregion
    }

    #region PMI_BoMEntryTypeCollection class
    /// <summary>
    /// A collection of PMI_BoMEntryType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPMI_BoMEntryType", Namespace = PMI.TMCPlus.Namespaces.TMCPlus, ItemName = "PMI_BoMEntryType")]
    public partial class PMI_BoMEntryTypeCollection : List<PMI_BoMEntryType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_BoMEntryTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_BoMEntryTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_BoMEntryTypeCollection(IEnumerable<PMI_BoMEntryType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_BoMEntryTypeCollection(PMI_BoMEntryType[] values)
        {
            if (values != null)
            {
                return new PMI_BoMEntryTypeCollection(values);
            }

            return new PMI_BoMEntryTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_BoMEntryType[](PMI_BoMEntryTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_BoMEntryTypeCollection clone = new PMI_BoMEntryTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_BoMEntryType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region PMI_BoMType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlusXsd)]
    public partial class PMI_BoMType : IEncodeable
    {
        #region Constructors
        public PMI_BoMType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Id = null;
            m_Entries = new PMI_BoMEntryTypeCollection();
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Id", IsRequired = false, Order = 1)]
        public string Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }
        [DataMember(Name = "Entries", IsRequired = false, Order = 2)]
        public PMI_BoMEntryTypeCollection Entries
        {
            get
            {
                return m_Entries;
            }
            set
            {
                m_Entries = value;

                if (value == null)
                {
                    m_Entries = new PMI_BoMEntryTypeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PMI_BoMType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PMI_BoMType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PMI_BoMType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCPlusXsd);

            encoder.WriteString("Id", Id);
            encoder.WriteEncodeableArray("Entries", Entries.ToArray(), typeof(PMI_BoMEntryType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCPlusXsd);
            Id = decoder.ReadString("Id");
            Entries = (PMI_BoMEntryTypeCollection) decoder.ReadEncodeableArray("Entries", typeof(PMI_BoMEntryType));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PMI_BoMType value = encodeable as PMI_BoMType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Id, value.m_Id)) return false;
            if (!Utils.IsEqual(m_Entries, value.m_Entries)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            PMI_BoMType clone = (PMI_BoMType)this.MemberwiseClone();

            clone.m_Id = (string)Utils.Clone(this.m_Id);
            clone.m_Entries = (PMI_BoMEntryTypeCollection)Utils.Clone(this.m_Entries);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Id;
        private PMI_BoMEntryTypeCollection m_Entries;
        #endregion
    }

    #region PMI_BoMTypeCollection class
    /// <summary>
    /// A collection of PMI_BoMType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPMI_BoMType", Namespace = PMI.TMCPlus.Namespaces.TMCPlus, ItemName = "PMI_BoMType")]
    public partial class PMI_BoMTypeCollection : List<PMI_BoMType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_BoMTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_BoMTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_BoMTypeCollection(IEnumerable<PMI_BoMType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_BoMTypeCollection(PMI_BoMType[] values)
        {
            if (values != null)
            {
                return new PMI_BoMTypeCollection(values);
            }

            return new PMI_BoMTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_BoMType[](PMI_BoMTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_BoMTypeCollection clone = new PMI_BoMTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_BoMType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region PMI_MaterialAttributesType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlusXsd)]
    public partial class PMI_MaterialAttributesType : IEncodeable
    {
        #region Constructors
        public PMI_MaterialAttributesType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ParentGroup = null;
            m_BoMLevel = null;
            m_ShelfLife = (int)0;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ParentGroup", IsRequired = false, Order = 1)]
        public string ParentGroup
        {
            get
            {
                return m_ParentGroup;
            }
            set
            {
                m_ParentGroup = value;
            }
        }
        [DataMember(Name = "BoMLevel", IsRequired = false, Order = 2)]
        public string BoMLevel
        {
            get
            {
                return m_BoMLevel;
            }
            set
            {
                m_BoMLevel = value;
            }
        }
        [DataMember(Name = "ShelfLife", IsRequired = false, Order = 3)]
        public int ShelfLife
        {
            get
            {
                return m_ShelfLife;
            }
            set
            {
                m_ShelfLife = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PMI_MaterialAttributesType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PMI_MaterialAttributesType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PMI_MaterialAttributesType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCPlusXsd);

            encoder.WriteString("ParentGroup", ParentGroup);
            encoder.WriteString("BoMLevel", BoMLevel);
            encoder.WriteInt32("ShelfLife", ShelfLife);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCPlusXsd);
            ParentGroup = decoder.ReadString("ParentGroup");
            BoMLevel = decoder.ReadString("BoMLevel");
            ShelfLife = decoder.ReadInt32("ShelfLife");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PMI_MaterialAttributesType value = encodeable as PMI_MaterialAttributesType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ParentGroup, value.m_ParentGroup)) return false;
            if (!Utils.IsEqual(m_BoMLevel, value.m_BoMLevel)) return false;
            if (!Utils.IsEqual(m_ShelfLife, value.m_ShelfLife)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            PMI_MaterialAttributesType clone = (PMI_MaterialAttributesType)this.MemberwiseClone();

            clone.m_ParentGroup = (string)Utils.Clone(this.m_ParentGroup);
            clone.m_BoMLevel = (string)Utils.Clone(this.m_BoMLevel);
            clone.m_ShelfLife = (int)Utils.Clone(this.m_ShelfLife);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ParentGroup;
        private string m_BoMLevel;
        private int m_ShelfLife;
        #endregion
    }

    #region PMI_MaterialAttributesTypeCollection class
    /// <summary>
    /// A collection of PMI_MaterialAttributesType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPMI_MaterialAttributesType", Namespace = PMI.TMCPlus.Namespaces.TMCPlus, ItemName = "PMI_MaterialAttributesType")]
    public partial class PMI_MaterialAttributesTypeCollection : List<PMI_MaterialAttributesType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_MaterialAttributesTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_MaterialAttributesTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_MaterialAttributesTypeCollection(IEnumerable<PMI_MaterialAttributesType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_MaterialAttributesTypeCollection(PMI_MaterialAttributesType[] values)
        {
            if (values != null)
            {
                return new PMI_MaterialAttributesTypeCollection(values);
            }

            return new PMI_MaterialAttributesTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_MaterialAttributesType[](PMI_MaterialAttributesTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_MaterialAttributesTypeCollection clone = new PMI_MaterialAttributesTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_MaterialAttributesType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region PMI_MaterialLotAttributesType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlusXsd)]
    public partial class PMI_MaterialLotAttributesType : IEncodeable
    {
        #region Constructors
        public PMI_MaterialLotAttributesType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_BestUsedBeDate = DateTime.MinValue;
            m_Grade = null;
            m_State = PMI_MaterialStateEnumeration.Good;
            m_ProductionDate = DateTime.MinValue;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "BestUsedBeDate", IsRequired = false, Order = 1)]
        public DateTime BestUsedBeDate
        {
            get
            {
                return m_BestUsedBeDate;
            }
            set
            {
                m_BestUsedBeDate = value;
            }
        }
        [DataMember(Name = "Grade", IsRequired = false, Order = 2)]
        public PMI_MaterialQualityType Grade
        {
            get
            {
                return m_Grade;
            }
            set
            {
                m_Grade = value;
            }
        }
        [DataMember(Name = "State", IsRequired = false, Order = 3)]
        public PMI_MaterialStateEnumeration State
        {
            get
            {
                return m_State;
            }
            set
            {
                m_State = value;
            }
        }
        [DataMember(Name = "ProductionDate", IsRequired = false, Order = 4)]
        public DateTime ProductionDate
        {
            get
            {
                return m_ProductionDate;
            }
            set
            {
                m_ProductionDate = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PMI_MaterialLotAttributesType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PMI_MaterialLotAttributesType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PMI_MaterialLotAttributesType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCPlusXsd);

            encoder.WriteDateTime("BestUsedBeDate", BestUsedBeDate);
            encoder.WriteEncodeable("Grade", Grade, typeof(PMI_MaterialQualityType));
            encoder.WriteEnumerated("State", State);
            encoder.WriteDateTime("ProductionDate", ProductionDate);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCPlusXsd);
            BestUsedBeDate = decoder.ReadDateTime("BestUsedBeDate");
            Grade = (PMI_MaterialQualityType) decoder.ReadEncodeable("Grade", typeof(PMI_MaterialQualityType));
            State = (PMI_MaterialStateEnumeration) decoder.ReadEnumerated("State", typeof(PMI_MaterialStateEnumeration));
            ProductionDate = decoder.ReadDateTime("ProductionDate");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PMI_MaterialLotAttributesType value = encodeable as PMI_MaterialLotAttributesType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_BestUsedBeDate, value.m_BestUsedBeDate)) return false;
            if (!Utils.IsEqual(m_Grade, value.m_Grade)) return false;
            if (!Utils.IsEqual(m_State, value.m_State)) return false;
            if (!Utils.IsEqual(m_ProductionDate, value.m_ProductionDate)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            PMI_MaterialLotAttributesType clone = (PMI_MaterialLotAttributesType)this.MemberwiseClone();

            clone.m_BestUsedBeDate = (DateTime)Utils.Clone(this.m_BestUsedBeDate);
            clone.m_Grade = (PMI_MaterialQualityType)Utils.Clone(this.m_Grade);
            clone.m_State = (PMI_MaterialStateEnumeration)Utils.Clone(this.m_State);
            clone.m_ProductionDate = (DateTime)Utils.Clone(this.m_ProductionDate);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_BestUsedBeDate;
        private PMI_MaterialQualityType m_Grade;
        private PMI_MaterialStateEnumeration m_State;
        private DateTime m_ProductionDate;
        #endregion
    }

    #region PMI_MaterialLotAttributesTypeCollection class
    /// <summary>
    /// A collection of PMI_MaterialLotAttributesType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPMI_MaterialLotAttributesType", Namespace = PMI.TMCPlus.Namespaces.TMCPlus, ItemName = "PMI_MaterialLotAttributesType")]
    public partial class PMI_MaterialLotAttributesTypeCollection : List<PMI_MaterialLotAttributesType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_MaterialLotAttributesTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_MaterialLotAttributesTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_MaterialLotAttributesTypeCollection(IEnumerable<PMI_MaterialLotAttributesType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_MaterialLotAttributesTypeCollection(PMI_MaterialLotAttributesType[] values)
        {
            if (values != null)
            {
                return new PMI_MaterialLotAttributesTypeCollection(values);
            }

            return new PMI_MaterialLotAttributesTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_MaterialLotAttributesType[](PMI_MaterialLotAttributesTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_MaterialLotAttributesTypeCollection clone = new PMI_MaterialLotAttributesTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_MaterialLotAttributesType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region PMI_MaterialQualityType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = PMI.TMCPlus.Namespaces.TMCPlusXsd)]
    public partial class PMI_MaterialQualityType : IEncodeable
    {
        #region Constructors
        public PMI_MaterialQualityType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Id = null;
            m_MES_Id = null;
            m_Description = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Id", IsRequired = false, Order = 1)]
        public string Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }
        [DataMember(Name = "MES_Id", IsRequired = false, Order = 2)]
        public string MES_Id
        {
            get
            {
                return m_MES_Id;
            }
            set
            {
                m_MES_Id = value;
            }
        }
        [DataMember(Name = "Description", IsRequired = false, Order = 3)]
        public LocalizedText Description
        {
            get
            {
                return m_Description;
            }
            set
            {
                m_Description = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PMI_MaterialQualityType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PMI_MaterialQualityType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PMI_MaterialQualityType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCPlusXsd);

            encoder.WriteString("Id", Id);
            encoder.WriteString("MES_Id", MES_Id);
            encoder.WriteLocalizedText("Description", Description);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCPlusXsd);
            Id = decoder.ReadString("Id");
            MES_Id = decoder.ReadString("MES_Id");
            Description = decoder.ReadLocalizedText("Description");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PMI_MaterialQualityType value = encodeable as PMI_MaterialQualityType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Id, value.m_Id)) return false;
            if (!Utils.IsEqual(m_MES_Id, value.m_MES_Id)) return false;
            if (!Utils.IsEqual(m_Description, value.m_Description)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            PMI_MaterialQualityType clone = (PMI_MaterialQualityType)this.MemberwiseClone();

            clone.m_Id = (string)Utils.Clone(this.m_Id);
            clone.m_MES_Id = (string)Utils.Clone(this.m_MES_Id);
            clone.m_Description = (LocalizedText)Utils.Clone(this.m_Description);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Id;
        private string m_MES_Id;
        private LocalizedText m_Description;
        #endregion
    }

    #region PMI_MaterialQualityTypeCollection class
    /// <summary>
    /// A collection of PMI_MaterialQualityType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPMI_MaterialQualityType", Namespace = PMI.TMCPlus.Namespaces.TMCPlus, ItemName = "PMI_MaterialQualityType")]
    public partial class PMI_MaterialQualityTypeCollection : List<PMI_MaterialQualityType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public PMI_MaterialQualityTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public PMI_MaterialQualityTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public PMI_MaterialQualityTypeCollection(IEnumerable<PMI_MaterialQualityType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator PMI_MaterialQualityTypeCollection(PMI_MaterialQualityType[] values)
        {
            if (values != null)
            {
                return new PMI_MaterialQualityTypeCollection(values);
            }

            return new PMI_MaterialQualityTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator PMI_MaterialQualityType[](PMI_MaterialQualityTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            PMI_MaterialQualityTypeCollection clone = new PMI_MaterialQualityTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((PMI_MaterialQualityType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

}
