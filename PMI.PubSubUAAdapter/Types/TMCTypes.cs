/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.3, using .NET Server 2.6.0 template (version 2)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by albertopiovan <alberto.piovan@aleph.solutions>
** </auto-generated>
**
** Copyright (c) 2006-2020 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://opcfoundation.org/UA/TMC/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 17.04.2020
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;
using Opc.Ua;
using System.Diagnostics;
using Range = Opc.Ua.Range;

namespace TMCGroup.TMC
{
    #region CommandEnumeration
    /// <summary>
    /// The possible encodings for a CommandEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum CommandEnumeration
    {
        [EnumMember(Value = "Abort_0")]
        Abort = 0,
        [EnumMember(Value = "Start_1")]
        Start = 1,
        [EnumMember(Value = "Stop_2")]
        Stop = 2,
        [EnumMember(Value = "Reset_3")]
        Reset = 3,
        [EnumMember(Value = "Hold_4")]
        Hold = 4,
        [EnumMember(Value = "Un_Hold_5")]
        Un_Hold = 5,
        [EnumMember(Value = "Clear_6")]
        Clear = 6,
    }

    #region CommandEnumerationCollection Class
    /// <summary>
    /// A collection of CommandEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class CommandEnumerationCollection : List<CommandEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public CommandEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public CommandEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public CommandEnumerationCollection(IEnumerable<CommandEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator CommandEnumerationCollection(CommandEnumeration[] values)
        {
            if (values != null)
            {
                return new CommandEnumerationCollection(values);
            }

            return new CommandEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator CommandEnumeration[](CommandEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            CommandEnumerationCollection clone = new CommandEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((CommandEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region ControlModeEnumeration
    /// <summary>
    /// The possible encodings for a ControlModeEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum ControlModeEnumeration
    {
        [EnumMember(Value = "OTHER_0")]
        OTHER = 0,
        [EnumMember(Value = "PRODUCTION_1")]
        PRODUCTION = 1,
        [EnumMember(Value = "MAINTENANCE_2")]
        MAINTENANCE = 2,
        [EnumMember(Value = "MANUAL_3")]
        MANUAL = 3,
        [EnumMember(Value = "CHANGE_OVER_4")]
        CHANGE_OVER = 4,
        [EnumMember(Value = "CLEAN_5")]
        CLEAN = 5,
        [EnumMember(Value = "SET_UP_6")]
        SET_UP = 6,
        [EnumMember(Value = "EMPTY_OUT_7")]
        EMPTY_OUT = 7,
        [EnumMember(Value = "REMOTE_SERVICE_8")]
        REMOTE_SERVICE = 8,
    }

    #region ControlModeEnumerationCollection Class
    /// <summary>
    /// A collection of ControlModeEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class ControlModeEnumerationCollection : List<ControlModeEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ControlModeEnumerationCollection() { }

        /// <summary>-
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ControlModeEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ControlModeEnumerationCollection(IEnumerable<ControlModeEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ControlModeEnumerationCollection(ControlModeEnumeration[] values)
        {
            if (values != null)
            {
                return new ControlModeEnumerationCollection(values);
            }

            return new ControlModeEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ControlModeEnumeration[](ControlModeEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            ControlModeEnumerationCollection clone = new ControlModeEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ControlModeEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region ControlsHWFeatureEnumeration
    /// <summary>
    /// The possible encodings for a ControlsHWFeatureEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum ControlsHWFeatureEnumeration
    {
        [EnumMember(Value = "Other_0")]
        Other = 0,
        [EnumMember(Value = "IOImage_1")]
        IOImage = 1,
        [EnumMember(Value = "LiveStream_2")]
        LiveStream = 2,
        [EnumMember(Value = "RemoteConnection_3")]
        RemoteConnection = 3,
        [EnumMember(Value = "ScreenshotCurrentPage_4")]
        ScreenshotCurrentPage = 4,
        [EnumMember(Value = "SystemDump_5")]
        SystemDump = 5,
    }

    #region ControlsHWFeatureEnumerationCollection Class
    /// <summary>
    /// A collection of ControlsHWFeatureEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class ControlsHWFeatureEnumerationCollection : List<ControlsHWFeatureEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ControlsHWFeatureEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ControlsHWFeatureEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ControlsHWFeatureEnumerationCollection(IEnumerable<ControlsHWFeatureEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ControlsHWFeatureEnumerationCollection(ControlsHWFeatureEnumeration[] values)
        {
            if (values != null)
            {
                return new ControlsHWFeatureEnumerationCollection(values);
            }

            return new ControlsHWFeatureEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ControlsHWFeatureEnumeration[](ControlsHWFeatureEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            ControlsHWFeatureEnumerationCollection clone = new ControlsHWFeatureEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ControlsHWFeatureEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region ControlsSWFeatureEnumeration
    /// <summary>
    /// The possible encodings for a ControlsSWFeatureEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum ControlsSWFeatureEnumeration
    {
        [EnumMember(Value = "Other_0")]
        Other = 0,
        [EnumMember(Value = "SoftwarePackageRepository_1")]
        SoftwarePackageRepository = 1,
        [EnumMember(Value = "SoftwarePackageInstall_2")]
        SoftwarePackageInstall = 2,
    }

    #region ControlsSWFeatureEnumerationCollection Class
    /// <summary>
    /// A collection of ControlsSWFeatureEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class ControlsSWFeatureEnumerationCollection : List<ControlsSWFeatureEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ControlsSWFeatureEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ControlsSWFeatureEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ControlsSWFeatureEnumerationCollection(IEnumerable<ControlsSWFeatureEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ControlsSWFeatureEnumerationCollection(ControlsSWFeatureEnumeration[] values)
        {
            if (values != null)
            {
                return new ControlsSWFeatureEnumerationCollection(values);
            }

            return new ControlsSWFeatureEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ControlsSWFeatureEnumeration[](ControlsSWFeatureEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            ControlsSWFeatureEnumerationCollection clone = new ControlsSWFeatureEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ControlsSWFeatureEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region IOTypeEnumeration
    /// <summary>
    /// The possible encodings for a IOTypeEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum IOTypeEnumeration
    {
        [EnumMember(Value = "BYTE_0")]
        BYTE = 0,
        [EnumMember(Value = "WORD_1")]
        WORD = 1,
        [EnumMember(Value = "DWORD_2")]
        DWORD = 2,
        [EnumMember(Value = "LWORD_3")]
        LWORD = 3,
        [EnumMember(Value = "SINT_4")]
        SINT = 4,
        [EnumMember(Value = "INT_5")]
        INT = 5,
        [EnumMember(Value = "DINT_6")]
        DINT = 6,
        [EnumMember(Value = "LINT_7")]
        LINT = 7,
        [EnumMember(Value = "USINT_8")]
        USINT = 8,
        [EnumMember(Value = "UINT_9")]
        UINT = 9,
        [EnumMember(Value = "UDINT_10")]
        UDINT = 10,
        [EnumMember(Value = "ULINT_11")]
        ULINT = 11,
        [EnumMember(Value = "REAL_12")]
        REAL = 12,
        [EnumMember(Value = "LREAL_13")]
        LREAL = 13,
        [EnumMember(Value = "TIME_14")]
        TIME = 14,
        [EnumMember(Value = "LTIME_15")]
        LTIME = 15,
        [EnumMember(Value = "DATE_16")]
        DATE = 16,
        [EnumMember(Value = "LDATE_17")]
        LDATE = 17,
        [EnumMember(Value = "TIME_OF_DAY_18")]
        TIME_OF_DAY = 18,
        [EnumMember(Value = "LTIME_OF_DAY_19")]
        LTIME_OF_DAY = 19,
        [EnumMember(Value = "DATE_AND_TIME_20")]
        DATE_AND_TIME = 20,
        [EnumMember(Value = "LDATE_AND_TIME_21")]
        LDATE_AND_TIME = 21,
        [EnumMember(Value = "CHAR_22")]
        CHAR = 22,
        [EnumMember(Value = "WCHAR_23")]
        WCHAR = 23,
        [EnumMember(Value = "STRING_24")]
        STRING = 24,
        [EnumMember(Value = "WSTRING_25")]
        WSTRING = 25,
    }

    #region IOTypeEnumerationCollection Class
    /// <summary>
    /// A collection of IOTypeEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class IOTypeEnumerationCollection : List<IOTypeEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public IOTypeEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public IOTypeEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public IOTypeEnumerationCollection(IEnumerable<IOTypeEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator IOTypeEnumerationCollection(IOTypeEnumeration[] values)
        {
            if (values != null)
            {
                return new IOTypeEnumerationCollection(values);
            }

            return new IOTypeEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator IOTypeEnumeration[](IOTypeEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            IOTypeEnumerationCollection clone = new IOTypeEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((IOTypeEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region MaterialIntergrityAgentEnumeration
    /// <summary>
    /// Identifies the possible agents responsible for material integrity checking.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum MaterialIntergrityAgentEnumeration
    {
        [EnumMember(Value = "Other_0")]
        Other = 0,
        /// <summary>
        /// The MES system is in charge of material integrity checks.
        /// </summary>
        [EnumMember(Value = "MES_1")]
        MES = 1,
        /// <summary>
        /// The local application is in charge of materil integrity checks.
        /// </summary>
        [EnumMember(Value = "Local_2")]
        Local = 2,
        /// <summary>
        /// The material integrity checks are performed (visual) by the operator and no system is in charge of material integrity checks.
        /// </summary>
        [EnumMember(Value = "None_3")]
        None = 3,
    }

    #region MaterialIntergrityAgentEnumerationCollection Class
    /// <summary>
    /// A collection of MaterialIntergrityAgentEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class MaterialIntergrityAgentEnumerationCollection : List<MaterialIntergrityAgentEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MaterialIntergrityAgentEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MaterialIntergrityAgentEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MaterialIntergrityAgentEnumerationCollection(IEnumerable<MaterialIntergrityAgentEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MaterialIntergrityAgentEnumerationCollection(MaterialIntergrityAgentEnumeration[] values)
        {
            if (values != null)
            {
                return new MaterialIntergrityAgentEnumerationCollection(values);
            }

            return new MaterialIntergrityAgentEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MaterialIntergrityAgentEnumeration[](MaterialIntergrityAgentEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            MaterialIntergrityAgentEnumerationCollection clone = new MaterialIntergrityAgentEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MaterialIntergrityAgentEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region ParameterDependencyEnumeration
    /// <summary>
    /// The possible encodings for a ParameterDependencyEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum ParameterDependencyEnumeration
    {
        [EnumMember(Value = "Machine_0")]
        Machine = 0,
        [EnumMember(Value = "Brand_1")]
        Brand = 1,
        [EnumMember(Value = "Machine_and_Brand_2")]
        Machine_and_Brand = 2,
    }

    #region ParameterDependencyEnumerationCollection Class
    /// <summary>
    /// A collection of ParameterDependencyEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class ParameterDependencyEnumerationCollection : List<ParameterDependencyEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ParameterDependencyEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ParameterDependencyEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ParameterDependencyEnumerationCollection(IEnumerable<ParameterDependencyEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ParameterDependencyEnumerationCollection(ParameterDependencyEnumeration[] values)
        {
            if (values != null)
            {
                return new ParameterDependencyEnumerationCollection(values);
            }

            return new ParameterDependencyEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ParameterDependencyEnumeration[](ParameterDependencyEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            ParameterDependencyEnumerationCollection clone = new ParameterDependencyEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ParameterDependencyEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region ProductionStatusEnumeration
    /// <summary>
    /// The possible encodings for a ProductionStatusEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum ProductionStatusEnumeration
    {
        [EnumMember(Value = "Other_0")]
        Other = 0,
        [EnumMember(Value = "Brand_Change_1")]
        Brand_Change = 1,
        [EnumMember(Value = "Production_2")]
        Production = 2,
        [EnumMember(Value = "No_Production_3")]
        No_Production = 3,
    }

    #region ProductionStatusEnumerationCollection Class
    /// <summary>
    /// A collection of ProductionStatusEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class ProductionStatusEnumerationCollection : List<ProductionStatusEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ProductionStatusEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ProductionStatusEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ProductionStatusEnumerationCollection(IEnumerable<ProductionStatusEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ProductionStatusEnumerationCollection(ProductionStatusEnumeration[] values)
        {
            if (values != null)
            {
                return new ProductionStatusEnumerationCollection(values);
            }

            return new ProductionStatusEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ProductionStatusEnumeration[](ProductionStatusEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            ProductionStatusEnumerationCollection clone = new ProductionStatusEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ProductionStatusEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region StateEnumeration
    /// <summary>
    /// The possible encodings for a StateEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum StateEnumeration
    {
        [EnumMember(Value = "Stopped_0")]
        Stopped = 0,
        [EnumMember(Value = "Resetting_1")]
        Resetting = 1,
        [EnumMember(Value = "Idle_2")]
        Idle = 2,
        [EnumMember(Value = "Starting_3")]
        Starting = 3,
        [EnumMember(Value = "Execute_4")]
        Execute = 4,
        [EnumMember(Value = "Completing_5")]
        Completing = 5,
        [EnumMember(Value = "Complete_6")]
        Complete = 6,
        [EnumMember(Value = "Aborting_7")]
        Aborting = 7,
        [EnumMember(Value = "Aborted_8")]
        Aborted = 8,
        [EnumMember(Value = "Stopping_9")]
        Stopping = 9,
        [EnumMember(Value = "Clearing_10")]
        Clearing = 10,
        [EnumMember(Value = "Suspending_11")]
        Suspending = 11,
        [EnumMember(Value = "Suspended_12")]
        Suspended = 12,
        [EnumMember(Value = "Un_Suspending_13")]
        Un_Suspending = 13,
        [EnumMember(Value = "Holding_14")]
        Holding = 14,
        [EnumMember(Value = "Held_15")]
        Held = 15,
        [EnumMember(Value = "Un_holding_16")]
        Un_holding = 16,
    }

    #region StateEnumerationCollection Class
    /// <summary>
    /// A collection of StateEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class StateEnumerationCollection : List<StateEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public StateEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public StateEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public StateEnumerationCollection(IEnumerable<StateEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator StateEnumerationCollection(StateEnumeration[] values)
        {
            if (values != null)
            {
                return new StateEnumerationCollection(values);
            }

            return new StateEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator StateEnumeration[](StateEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            StateEnumerationCollection clone = new StateEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((StateEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region StorageLogicEnumeration
    /// <summary>
    /// The possible encodings for a StorageLogicEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum StorageLogicEnumeration
    {
        [EnumMember(Value = "Other_0")]
        Other = 0,
        [EnumMember(Value = "FIFO_1")]
        FIFO = 1,
        [EnumMember(Value = "LIFO_2")]
        LIFO = 2,
        [EnumMember(Value = "FEFO_3")]
        FEFO = 3,
    }

    #region StorageLogicEnumerationCollection Class
    /// <summary>
    /// A collection of StorageLogicEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class StorageLogicEnumerationCollection : List<StorageLogicEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public StorageLogicEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public StorageLogicEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public StorageLogicEnumerationCollection(IEnumerable<StorageLogicEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator StorageLogicEnumerationCollection(StorageLogicEnumeration[] values)
        {
            if (values != null)
            {
                return new StorageLogicEnumerationCollection(values);
            }

            return new StorageLogicEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator StorageLogicEnumeration[](StorageLogicEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            StorageLogicEnumerationCollection clone = new StorageLogicEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((StorageLogicEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region TMCImplementedLevelEnumeration
    /// <summary>
    /// The possible encodings for a TMCImplementedLevelEnumeration value.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMC)]
    public enum TMCImplementedLevelEnumeration
    {
        /// <summary>
        /// None of the below
        /// </summary>
        [EnumMember(Value = "Other_0")]
        Other = 0,
        /// <summary>
        /// Essential server functionality
        /// </summary>
        [EnumMember(Value = "Essential_1")]
        Essential = 1,
        /// <summary>
        /// Advanced features are implemented
        /// </summary>
        [EnumMember(Value = "Adavnced_2")]
        Adavnced = 2,
    }

    #region TMCImplementedLevelEnumerationCollection Class
    /// <summary>
    /// A collection of TMCImplementedLevelEnumeration objects.
    /// </summary>
    [CollectionDataContract]
    public partial class TMCImplementedLevelEnumerationCollection : List<TMCImplementedLevelEnumeration>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public TMCImplementedLevelEnumerationCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public TMCImplementedLevelEnumerationCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public TMCImplementedLevelEnumerationCollection(IEnumerable<TMCImplementedLevelEnumeration> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator TMCImplementedLevelEnumerationCollection(TMCImplementedLevelEnumeration[] values)
        {
            if (values != null)
            {
                return new TMCImplementedLevelEnumerationCollection(values);
            }

            return new TMCImplementedLevelEnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator TMCImplementedLevelEnumeration[](TMCImplementedLevelEnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            TMCImplementedLevelEnumerationCollection clone = new TMCImplementedLevelEnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((TMCImplementedLevelEnumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion

    #endregion

    #region DataDescriptionType Class
    /// <summary>
    /// The metadata (i.e. the complete identification except for the actual value) that describes one setting parameter.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class DataDescriptionType : IEncodeable
    {
        #region Constructors
        public DataDescriptionType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ID = null;
            m_MES_ID = null;
            m_EngineeringUnits = null;
            m_DisplayFormat = null;
            m_Dependency = ParameterDependencyEnumeration.Machine;
            m_DataType = null;
            m_UserSubset = false;
            m_ControlRange = null;
            m_AlarmRange = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ID", IsRequired = false, Order = 1)]
        public string ID
        {
            get
            {
                return m_ID;
            }
            set
            {
                m_ID = value;
            }
        }
        [DataMember(Name = "MES_ID", IsRequired = false, Order = 2)]
        public string MES_ID
        {
            get
            {
                return m_MES_ID;
            }
            set
            {
                m_MES_ID = value;
            }
        }
        [DataMember(Name = "EngineeringUnits", IsRequired = false, Order = 3)]
        public EUInformation EngineeringUnits
        {
            get
            {
                return m_EngineeringUnits;
            }
            set
            {
                m_EngineeringUnits = value;
            }
        }
        [DataMember(Name = "DisplayFormat", IsRequired = false, Order = 4)]
        public string DisplayFormat
        {
            get
            {
                return m_DisplayFormat;
            }
            set
            {
                m_DisplayFormat = value;
            }
        }
        [DataMember(Name = "Dependency", IsRequired = false, Order = 5)]
        public ParameterDependencyEnumeration Dependency
        {
            get
            {
                return m_Dependency;
            }
            set
            {
                m_Dependency = value;
            }
        }
        [DataMember(Name = "DataType", IsRequired = false, Order = 6)]
        public string DataType
        {
            get
            {
                return m_DataType;
            }
            set
            {
                m_DataType = value;
            }
        }
        [DataMember(Name = "UserSubset", IsRequired = false, Order = 7)]
        public bool UserSubset
        {
            get
            {
                return m_UserSubset;
            }
            set
            {
                m_UserSubset = value;
            }
        }
        [DataMember(Name = "ControlRange", IsRequired = false, Order = 8)]
        public Range ControlRange
        {
            get
            {
                return m_ControlRange;
            }
            set
            {
                m_ControlRange = value;
            }
        }
        [DataMember(Name = "AlarmRange", IsRequired = false, Order = 9)]
        public Range AlarmRange
        {
            get
            {
                return m_AlarmRange;
            }
            set
            {
                m_AlarmRange = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataDescriptionType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataDescriptionType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataDescriptionType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("ID", ID);
            encoder.WriteString("MES_ID", MES_ID);
            encoder.WriteEncodeable("EngineeringUnits", EngineeringUnits, typeof(EUInformation));
            encoder.WriteString("DisplayFormat", DisplayFormat);
            encoder.WriteEnumerated("Dependency", Dependency);
            encoder.WriteString("DataType", DataType);
            encoder.WriteBoolean("UserSubset", UserSubset);
            encoder.WriteEncodeable("ControlRange", ControlRange, typeof(Range));
            encoder.WriteEncodeable("AlarmRange", AlarmRange, typeof(Range));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            ID = decoder.ReadString("ID");
            MES_ID = decoder.ReadString("MES_ID");
            EngineeringUnits = (EUInformation) decoder.ReadEncodeable("EngineeringUnits", typeof(EUInformation));
            DisplayFormat = decoder.ReadString("DisplayFormat");
            Dependency = (ParameterDependencyEnumeration) decoder.ReadEnumerated("Dependency", typeof(ParameterDependencyEnumeration));
            DataType = decoder.ReadString("DataType");
            UserSubset = decoder.ReadBoolean("UserSubset");
            ControlRange = (Range) decoder.ReadEncodeable("ControlRange", typeof(Range));
            AlarmRange = (Range) decoder.ReadEncodeable("AlarmRange", typeof(Range));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataDescriptionType value = encodeable as DataDescriptionType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ID, value.m_ID)) return false;
            if (!Utils.IsEqual(m_MES_ID, value.m_MES_ID)) return false;
            if (!Utils.IsEqual(m_EngineeringUnits, value.m_EngineeringUnits)) return false;
            if (!Utils.IsEqual(m_DisplayFormat, value.m_DisplayFormat)) return false;
            if (!Utils.IsEqual(m_Dependency, value.m_Dependency)) return false;
            if (!Utils.IsEqual(m_DataType, value.m_DataType)) return false;
            if (!Utils.IsEqual(m_UserSubset, value.m_UserSubset)) return false;
            if (!Utils.IsEqual(m_ControlRange, value.m_ControlRange)) return false;
            if (!Utils.IsEqual(m_AlarmRange, value.m_AlarmRange)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            DataDescriptionType clone = (DataDescriptionType)this.MemberwiseClone();

            clone.m_ID = (string)Utils.Clone(this.m_ID);
            clone.m_MES_ID = (string)Utils.Clone(this.m_MES_ID);
            clone.m_EngineeringUnits = (EUInformation)Utils.Clone(this.m_EngineeringUnits);
            clone.m_DisplayFormat = (string)Utils.Clone(this.m_DisplayFormat);
            clone.m_Dependency = (ParameterDependencyEnumeration)Utils.Clone(this.m_Dependency);
            clone.m_DataType = (string)Utils.Clone(this.m_DataType);
            clone.m_UserSubset = (bool)Utils.Clone(this.m_UserSubset);
            clone.m_ControlRange = (Range)Utils.Clone(this.m_ControlRange);
            clone.m_AlarmRange = (Range)Utils.Clone(this.m_AlarmRange);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ID;
        private string m_MES_ID;
        private EUInformation m_EngineeringUnits;
        private string m_DisplayFormat;
        private ParameterDependencyEnumeration m_Dependency;
        private string m_DataType;
        private bool m_UserSubset;
        private Range m_ControlRange;
        private Range m_AlarmRange;
        #endregion
    }

    #region DataDescriptionTypeCollection class
    /// <summary>
    /// A collection of DataDescriptionType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfDataDescriptionType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "DataDescriptionType")]
    public partial class DataDescriptionTypeCollection : List<DataDescriptionType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DataDescriptionTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DataDescriptionTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DataDescriptionTypeCollection(IEnumerable<DataDescriptionType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DataDescriptionTypeCollection(DataDescriptionType[] values)
        {
            if (values != null)
            {
                return new DataDescriptionTypeCollection(values);
            }

            return new DataDescriptionTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DataDescriptionType[](DataDescriptionTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            DataDescriptionTypeCollection clone = new DataDescriptionTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DataDescriptionType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region DataSetEntryType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class DataSetEntryType : IEncodeable
    {
        #region Constructors
        public DataSetEntryType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ID = null;
            m_Value = Variant.Null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ID", IsRequired = false, Order = 1)]
        public string ID
        {
            get
            {
                return m_ID;
            }
            set
            {
                m_ID = value;
            }
        }
        [DataMember(Name = "Value", IsRequired = false, Order = 2)]
        public Variant Value
        {
            get
            {
                return m_Value;
            }
            set
            {
                m_Value = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataSetEntryType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataSetEntryType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataSetEntryType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("ID", ID);
            encoder.WriteVariant("Value", Value);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            ID = decoder.ReadString("ID");
            Value = decoder.ReadVariant("Value");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataSetEntryType value = encodeable as DataSetEntryType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ID, value.m_ID)) return false;
            if (!Utils.IsEqual(m_Value, value.m_Value)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            DataSetEntryType clone = (DataSetEntryType)this.MemberwiseClone();

            clone.m_ID = (string)Utils.Clone(this.m_ID);
            clone.m_Value = (Variant)Utils.Clone(this.m_Value);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ID;
        private Variant m_Value;
        #endregion
    }

    #region DataSetEntryTypeCollection class
    /// <summary>
    /// A collection of DataSetEntryType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfDataSetEntryType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "DataSetEntryType")]
    public partial class DataSetEntryTypeCollection : List<DataSetEntryType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DataSetEntryTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DataSetEntryTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DataSetEntryTypeCollection(IEnumerable<DataSetEntryType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DataSetEntryTypeCollection(DataSetEntryType[] values)
        {
            if (values != null)
            {
                return new DataSetEntryTypeCollection(values);
            }

            return new DataSetEntryTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DataSetEntryType[](DataSetEntryTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            DataSetEntryTypeCollection clone = new DataSetEntryTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DataSetEntryType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region DataSetListType Class
    /// <summary>
    /// Contains the description and other necessary metadata of the complete set of machine settigns required for production.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class DataSetListType : IEncodeable
    {
        #region Constructors
        public DataSetListType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_DataSetListId = null;
            m_DataSetListDescription = null;
            m_DataDescriptions = new DataDescriptionTypeCollection();
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "DataSetListId", IsRequired = false, Order = 1)]
        public string DataSetListId
        {
            get
            {
                return m_DataSetListId;
            }
            set
            {
                m_DataSetListId = value;
            }
        }
        [DataMember(Name = "DataSetListDescription", IsRequired = false, Order = 2)]
        public LocalizedText DataSetListDescription
        {
            get
            {
                return m_DataSetListDescription;
            }
            set
            {
                m_DataSetListDescription = value;
            }
        }
        [DataMember(Name = "DataDescriptions", IsRequired = false, Order = 3)]
        public DataDescriptionTypeCollection DataDescriptions
        {
            get
            {
                return m_DataDescriptions;
            }
            set
            {
                m_DataDescriptions = value;

                if (value == null)
                {
                    m_DataDescriptions = new DataDescriptionTypeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataSetListType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataSetListType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataSetListType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("DataSetListId", DataSetListId);
            encoder.WriteLocalizedText("DataSetListDescription", DataSetListDescription);
            encoder.WriteEncodeableArray("DataDescriptions", DataDescriptions.ToArray(), typeof(DataDescriptionType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            DataSetListId = decoder.ReadString("DataSetListId");
            DataSetListDescription = decoder.ReadLocalizedText("DataSetListDescription");
            DataDescriptions = (DataDescriptionTypeCollection) decoder.ReadEncodeableArray("DataDescriptions", typeof(DataDescriptionType));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataSetListType value = encodeable as DataSetListType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_DataSetListId, value.m_DataSetListId)) return false;
            if (!Utils.IsEqual(m_DataSetListDescription, value.m_DataSetListDescription)) return false;
            if (!Utils.IsEqual(m_DataDescriptions, value.m_DataDescriptions)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            DataSetListType clone = (DataSetListType)this.MemberwiseClone();

            clone.m_DataSetListId = (string)Utils.Clone(this.m_DataSetListId);
            clone.m_DataSetListDescription = (LocalizedText)Utils.Clone(this.m_DataSetListDescription);
            clone.m_DataDescriptions = (DataDescriptionTypeCollection)Utils.Clone(this.m_DataDescriptions);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_DataSetListId;
        private LocalizedText m_DataSetListDescription;
        private DataDescriptionTypeCollection m_DataDescriptions;
        #endregion
    }

    #region DataSetListTypeCollection class
    /// <summary>
    /// A collection of DataSetListType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfDataSetListType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "DataSetListType")]
    public partial class DataSetListTypeCollection : List<DataSetListType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DataSetListTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DataSetListTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DataSetListTypeCollection(IEnumerable<DataSetListType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DataSetListTypeCollection(DataSetListType[] values)
        {
            if (values != null)
            {
                return new DataSetListTypeCollection(values);
            }

            return new DataSetListTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DataSetListType[](DataSetListTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            DataSetListTypeCollection clone = new DataSetListTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DataSetListType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region DataSetType Class
    /// <summary>
    /// Complete set of settings values required to run production.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class DataSetType : IEncodeable
    {
        #region Constructors
        public DataSetType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_DataSetId = null;
            m_DataSetDescription = null;
            m_DataValues = new DataSetEntryTypeCollection();
            m_DataSetCRC = 0.0;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "DataSetId", IsRequired = false, Order = 1)]
        public string DataSetId
        {
            get
            {
                return m_DataSetId;
            }
            set
            {
                m_DataSetId = value;
            }
        }
        [DataMember(Name = "DataSetDescription", IsRequired = false, Order = 2)]
        public LocalizedText DataSetDescription
        {
            get
            {
                return m_DataSetDescription;
            }
            set
            {
                m_DataSetDescription = value;
            }
        }
        [DataMember(Name = "DataValues", IsRequired = false, Order = 3)]
        public DataSetEntryTypeCollection DataValues
        {
            get
            {
                return m_DataValues;
            }
            set
            {
                m_DataValues = value;

                if (value == null)
                {
                    m_DataValues = new DataSetEntryTypeCollection();
                }
            }
        }
        [DataMember(Name = "DataSetCRC", IsRequired = false, Order = 4)]
        public double DataSetCRC
        {
            get
            {
                return m_DataSetCRC;
            }
            set
            {
                m_DataSetCRC = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataSetType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataSetType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataSetType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("DataSetId", DataSetId);
            encoder.WriteLocalizedText("DataSetDescription", DataSetDescription);
            encoder.WriteEncodeableArray("DataValues", DataValues.ToArray(), typeof(DataSetEntryType));
            encoder.WriteDouble("DataSetCRC", DataSetCRC);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            DataSetId = decoder.ReadString("DataSetId");
            DataSetDescription = decoder.ReadLocalizedText("DataSetDescription");
            DataValues = (DataSetEntryTypeCollection) decoder.ReadEncodeableArray("DataValues", typeof(DataSetEntryType));
            DataSetCRC = decoder.ReadDouble("DataSetCRC");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataSetType value = encodeable as DataSetType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_DataSetId, value.m_DataSetId)) return false;
            if (!Utils.IsEqual(m_DataSetDescription, value.m_DataSetDescription)) return false;
            if (!Utils.IsEqual(m_DataValues, value.m_DataValues)) return false;
            if (!Utils.IsEqual(m_DataSetCRC, value.m_DataSetCRC)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            DataSetType clone = (DataSetType)this.MemberwiseClone();

            clone.m_DataSetId = (string)Utils.Clone(this.m_DataSetId);
            clone.m_DataSetDescription = (LocalizedText)Utils.Clone(this.m_DataSetDescription);
            clone.m_DataValues = (DataSetEntryTypeCollection)Utils.Clone(this.m_DataValues);
            clone.m_DataSetCRC = (double)Utils.Clone(this.m_DataSetCRC);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_DataSetId;
        private LocalizedText m_DataSetDescription;
        private DataSetEntryTypeCollection m_DataValues;
        private double m_DataSetCRC;
        #endregion
    }

    #region DataSetTypeCollection class
    /// <summary>
    /// A collection of DataSetType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfDataSetType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "DataSetType")]
    public partial class DataSetTypeCollection : List<DataSetType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DataSetTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DataSetTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DataSetTypeCollection(IEnumerable<DataSetType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DataSetTypeCollection(DataSetType[] values)
        {
            if (values != null)
            {
                return new DataSetTypeCollection(values);
            }

            return new DataSetTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DataSetType[](DataSetTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            DataSetTypeCollection clone = new DataSetTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DataSetType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region IOMetaType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class IOMetaType : IEncodeable
    {
        #region Constructors
        public IOMetaType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Description = null;
            m_Address = null;
            m_IOType = IOTypeEnumeration.BYTE;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Description", IsRequired = false, Order = 1)]
        public string Description
        {
            get
            {
                return m_Description;
            }
            set
            {
                m_Description = value;
            }
        }
        [DataMember(Name = "Address", IsRequired = false, Order = 2)]
        public string Address
        {
            get
            {
                return m_Address;
            }
            set
            {
                m_Address = value;
            }
        }
        [DataMember(Name = "IOType", IsRequired = false, Order = 3)]
        public IOTypeEnumeration IOType
        {
            get
            {
                return m_IOType;
            }
            set
            {
                m_IOType = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.IOMetaType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.IOMetaType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.IOMetaType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("Description", Description);
            encoder.WriteString("Address", Address);
            encoder.WriteEnumerated("IOType", IOType);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            Description = decoder.ReadString("Description");
            Address = decoder.ReadString("Address");
            IOType = (IOTypeEnumeration) decoder.ReadEnumerated("IOType", typeof(IOTypeEnumeration));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            IOMetaType value = encodeable as IOMetaType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Description, value.m_Description)) return false;
            if (!Utils.IsEqual(m_Address, value.m_Address)) return false;
            if (!Utils.IsEqual(m_IOType, value.m_IOType)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            IOMetaType clone = (IOMetaType)this.MemberwiseClone();

            clone.m_Description = (string)Utils.Clone(this.m_Description);
            clone.m_Address = (string)Utils.Clone(this.m_Address);
            clone.m_IOType = (IOTypeEnumeration)Utils.Clone(this.m_IOType);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Description;
        private string m_Address;
        private IOTypeEnumeration m_IOType;
        #endregion
    }

    #region IOMetaTypeCollection class
    /// <summary>
    /// A collection of IOMetaType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfIOMetaType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "IOMetaType")]
    public partial class IOMetaTypeCollection : List<IOMetaType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public IOMetaTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public IOMetaTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public IOMetaTypeCollection(IEnumerable<IOMetaType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator IOMetaTypeCollection(IOMetaType[] values)
        {
            if (values != null)
            {
                return new IOMetaTypeCollection(values);
            }

            return new IOMetaTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator IOMetaType[](IOMetaTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            IOMetaTypeCollection clone = new IOMetaTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((IOMetaType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region IOPointType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class IOPointType : IEncodeable
    {
        #region Optional Members
        [Flags]
        private enum IOPointTypeSet
        {
            IOPointMeta = 1,
            IOPointValue = 2,
        }
        #endregion

        #region Constructors
        public IOPointType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_encodingMask = 0;
            m_IOPointMeta = null;
            m_IOPointValue = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "EncodingMask", IsRequired = false, Order = 1)]
        private uint EncodingMask
        {
            get
            {
                return m_encodingMask;
            }
            set
            {
                m_encodingMask = value;
            }
        }

        [DataMember(Name = "IOPointMeta", IsRequired = false, Order = 2)]
        public IOMetaType IOPointMeta
        {
            get
            {
                return m_IOPointMeta;
            }
            set
            {
                m_IOPointMeta = value;
                m_encodingMask |= (uint) IOPointTypeSet.IOPointMeta;
            }
        }
        [DataMember(Name = "IOPointValue", IsRequired = false, Order = 3)]
        public IOValueType IOPointValue
        {
            get
            {
                return m_IOPointValue;
            }
            set
            {
                m_IOPointValue = value;
                m_encodingMask |= (uint) IOPointTypeSet.IOPointValue;
            }
        }

        public bool IsIOPointMetaSet()
        {
            return (m_encodingMask & (uint) IOPointTypeSet.IOPointMeta) != 0;
        }

        public void UnsetIOPointMeta()
        {
            m_encodingMask &= (~((uint)IOPointTypeSet.IOPointMeta));
            m_IOPointMeta = null;
        }

        public bool IsIOPointValueSet()
        {
            return (m_encodingMask & (uint) IOPointTypeSet.IOPointValue) != 0;
        }

        public void UnsetIOPointValue()
        {
            m_encodingMask &= (~((uint)IOPointTypeSet.IOPointValue));
            m_IOPointValue = null;
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.IOPointType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.IOPointType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.IOPointType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteUInt32("EncodingMask", (uint) m_encodingMask);

            if (IsIOPointMetaSet())
            {
                encoder.WriteEncodeable("IOPointMeta", IOPointMeta, typeof(IOMetaType));
            }
            if (IsIOPointValueSet())
            {
                encoder.WriteEncodeable("IOPointValue", IOPointValue, typeof(IOValueType));
            }

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);

            m_encodingMask = decoder.ReadUInt32("EncodingMask");

            if (IsIOPointMetaSet())
            {
                IOPointMeta = (IOMetaType) decoder.ReadEncodeable("IOPointMeta", typeof(IOMetaType));
            }
            if (IsIOPointValueSet())
            {
                IOPointValue = (IOValueType) decoder.ReadEncodeable("IOPointValue", typeof(IOValueType));
            }

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            IOPointType value = encodeable as IOPointType;

            if (value == null)
            {
                return false;
            }
            if (m_encodingMask != value.m_encodingMask) return false;
            if (IsIOPointMetaSet())
            {
                if (!Utils.IsEqual(m_IOPointMeta, value.m_IOPointMeta)) return false;
            }
            if (IsIOPointValueSet())
            {
                if (!Utils.IsEqual(m_IOPointValue, value.m_IOPointValue)) return false;
            }

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            IOPointType clone = (IOPointType)this.MemberwiseClone();

            clone.m_encodingMask = m_encodingMask;
            clone.m_IOPointMeta = (IOMetaType)Utils.Clone(this.m_IOPointMeta);
            clone.m_IOPointValue = (IOValueType)Utils.Clone(this.m_IOPointValue);

            return clone;
        }
        #endregion

        #region Private Fields
        protected uint m_encodingMask;
        private IOMetaType m_IOPointMeta;
        private IOValueType m_IOPointValue;
        #endregion
    }

    #region IOPointTypeCollection class
    /// <summary>
    /// A collection of IOPointType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfIOPointType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "IOPointType")]
    public partial class IOPointTypeCollection : List<IOPointType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public IOPointTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public IOPointTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public IOPointTypeCollection(IEnumerable<IOPointType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator IOPointTypeCollection(IOPointType[] values)
        {
            if (values != null)
            {
                return new IOPointTypeCollection(values);
            }

            return new IOPointTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator IOPointType[](IOPointTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            IOPointTypeCollection clone = new IOPointTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((IOPointType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region IOValueType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class IOValueType : IEncodeable
    {
        #region Constructors
        public IOValueType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_TimeStamp = DateTime.MinValue;
            m_RawValue = Variant.Null;
            m_EngValue = Variant.Null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "TimeStamp", IsRequired = false, Order = 1)]
        public DateTime TimeStamp
        {
            get
            {
                return m_TimeStamp;
            }
            set
            {
                m_TimeStamp = value;
            }
        }
        [DataMember(Name = "RawValue", IsRequired = false, Order = 2)]
        public Variant RawValue
        {
            get
            {
                return m_RawValue;
            }
            set
            {
                m_RawValue = value;
            }
        }
        [DataMember(Name = "EngValue", IsRequired = false, Order = 3)]
        public Variant EngValue
        {
            get
            {
                return m_EngValue;
            }
            set
            {
                m_EngValue = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.IOValueType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.IOValueType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.IOValueType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteDateTime("TimeStamp", TimeStamp);
            encoder.WriteVariant("RawValue", RawValue);
            encoder.WriteVariant("EngValue", EngValue);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            TimeStamp = decoder.ReadDateTime("TimeStamp");
            RawValue = decoder.ReadVariant("RawValue");
            EngValue = decoder.ReadVariant("EngValue");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            IOValueType value = encodeable as IOValueType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_TimeStamp, value.m_TimeStamp)) return false;
            if (!Utils.IsEqual(m_RawValue, value.m_RawValue)) return false;
            if (!Utils.IsEqual(m_EngValue, value.m_EngValue)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            IOValueType clone = (IOValueType)this.MemberwiseClone();

            clone.m_TimeStamp = (DateTime)Utils.Clone(this.m_TimeStamp);
            clone.m_RawValue = (Variant)Utils.Clone(this.m_RawValue);
            clone.m_EngValue = (Variant)Utils.Clone(this.m_EngValue);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_TimeStamp;
        private Variant m_RawValue;
        private Variant m_EngValue;
        #endregion
    }

    #region IOValueTypeCollection class
    /// <summary>
    /// A collection of IOValueType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfIOValueType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "IOValueType")]
    public partial class IOValueTypeCollection : List<IOValueType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public IOValueTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public IOValueTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public IOValueTypeCollection(IEnumerable<IOValueType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator IOValueTypeCollection(IOValueType[] values)
        {
            if (values != null)
            {
                return new IOValueTypeCollection(values);
            }

            return new IOValueTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator IOValueType[](IOValueTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            IOValueTypeCollection clone = new IOValueTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((IOValueType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region LoadUnloadPointType Class
    /// <summary>
    /// A physical location in the machine module where input materials can be loaded.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class LoadUnloadPointType : IEncodeable
    {
        #region Constructors
        public LoadUnloadPointType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ID = null;
            m_Description = null;
            m_MaterialCapability = new MaterialTypeCollection();
            m_UserName = null;
            m_MES_ID = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ID", IsRequired = false, Order = 1)]
        public string ID
        {
            get
            {
                return m_ID;
            }
            set
            {
                m_ID = value;
            }
        }
        [DataMember(Name = "Description", IsRequired = false, Order = 2)]
        public LocalizedText Description
        {
            get
            {
                return m_Description;
            }
            set
            {
                m_Description = value;
            }
        }
        [DataMember(Name = "MaterialCapability", IsRequired = false, Order = 3)]
        public MaterialTypeCollection MaterialCapability
        {
            get
            {
                return m_MaterialCapability;
            }
            set
            {
                m_MaterialCapability = value;

                if (value == null)
                {
                    m_MaterialCapability = new MaterialTypeCollection();
                }
            }
        }
        [DataMember(Name = "UserName", IsRequired = false, Order = 4)]
        public string UserName
        {
            get
            {
                return m_UserName;
            }
            set
            {
                m_UserName = value;
            }
        }
        [DataMember(Name = "MES_ID", IsRequired = false, Order = 5)]
        public string MES_ID
        {
            get
            {
                return m_MES_ID;
            }
            set
            {
                m_MES_ID = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.LoadUnloadPointType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.LoadUnloadPointType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.LoadUnloadPointType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("ID", ID);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteEncodeableArray("MaterialCapability", MaterialCapability.ToArray(), typeof(MaterialType));
            encoder.WriteString("UserName", UserName);
            encoder.WriteString("MES_ID", MES_ID);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            ID = decoder.ReadString("ID");
            Description = decoder.ReadLocalizedText("Description");
            MaterialCapability = (MaterialTypeCollection) decoder.ReadEncodeableArray("MaterialCapability", typeof(MaterialType));
            UserName = decoder.ReadString("UserName");
            MES_ID = decoder.ReadString("MES_ID");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            LoadUnloadPointType value = encodeable as LoadUnloadPointType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ID, value.m_ID)) return false;
            if (!Utils.IsEqual(m_Description, value.m_Description)) return false;
            if (!Utils.IsEqual(m_MaterialCapability, value.m_MaterialCapability)) return false;
            if (!Utils.IsEqual(m_UserName, value.m_UserName)) return false;
            if (!Utils.IsEqual(m_MES_ID, value.m_MES_ID)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            LoadUnloadPointType clone = (LoadUnloadPointType)this.MemberwiseClone();

            clone.m_ID = (string)Utils.Clone(this.m_ID);
            clone.m_Description = (LocalizedText)Utils.Clone(this.m_Description);
            clone.m_MaterialCapability = (MaterialTypeCollection)Utils.Clone(this.m_MaterialCapability);
            clone.m_UserName = (string)Utils.Clone(this.m_UserName);
            clone.m_MES_ID = (string)Utils.Clone(this.m_MES_ID);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ID;
        private LocalizedText m_Description;
        private MaterialTypeCollection m_MaterialCapability;
        private string m_UserName;
        private string m_MES_ID;
        #endregion
    }

    #region LoadUnloadPointTypeCollection class
    /// <summary>
    /// A collection of LoadUnloadPointType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfLoadUnloadPointType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "LoadUnloadPointType")]
    public partial class LoadUnloadPointTypeCollection : List<LoadUnloadPointType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public LoadUnloadPointTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public LoadUnloadPointTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public LoadUnloadPointTypeCollection(IEnumerable<LoadUnloadPointType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator LoadUnloadPointTypeCollection(LoadUnloadPointType[] values)
        {
            if (values != null)
            {
                return new LoadUnloadPointTypeCollection(values);
            }

            return new LoadUnloadPointTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator LoadUnloadPointType[](LoadUnloadPointTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            LoadUnloadPointTypeCollection clone = new LoadUnloadPointTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((LoadUnloadPointType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region MaterialStorageBufferDataType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class MaterialStorageBufferDataType : IEncodeable
    {
        #region Constructors
        public MaterialStorageBufferDataType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ID = null;
            m_MES_ID = null;
            m_StoredMaterial = null;
            m_EUInfo = null;
            m_TotalStorageCapacity = 0.0;
            m_StorageLogic = StorageLogicEnumeration.Other;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ID", IsRequired = false, Order = 1)]
        public string ID
        {
            get
            {
                return m_ID;
            }
            set
            {
                m_ID = value;
            }
        }
        [DataMember(Name = "MES_ID", IsRequired = false, Order = 2)]
        public string MES_ID
        {
            get
            {
                return m_MES_ID;
            }
            set
            {
                m_MES_ID = value;
            }
        }
        [DataMember(Name = "StoredMaterial", IsRequired = false, Order = 3)]
        public MaterialType StoredMaterial
        {
            get
            {
                return m_StoredMaterial;
            }
            set
            {
                m_StoredMaterial = value;
            }
        }
        [DataMember(Name = "EUInfo", IsRequired = false, Order = 4)]
        public EUInformation EUInfo
        {
            get
            {
                return m_EUInfo;
            }
            set
            {
                m_EUInfo = value;
            }
        }
        [DataMember(Name = "TotalStorageCapacity", IsRequired = false, Order = 5)]
        public double TotalStorageCapacity
        {
            get
            {
                return m_TotalStorageCapacity;
            }
            set
            {
                m_TotalStorageCapacity = value;
            }
        }
        [DataMember(Name = "StorageLogic", IsRequired = false, Order = 6)]
        public StorageLogicEnumeration StorageLogic
        {
            get
            {
                return m_StorageLogic;
            }
            set
            {
                m_StorageLogic = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MaterialStorageBufferDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MaterialStorageBufferDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MaterialStorageBufferDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("ID", ID);
            encoder.WriteString("MES_ID", MES_ID);
            encoder.WriteEncodeable("StoredMaterial", StoredMaterial, typeof(MaterialType));
            encoder.WriteEncodeable("EUInfo", EUInfo, typeof(EUInformation));
            encoder.WriteDouble("TotalStorageCapacity", TotalStorageCapacity);
            encoder.WriteEnumerated("StorageLogic", StorageLogic);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            ID = decoder.ReadString("ID");
            MES_ID = decoder.ReadString("MES_ID");
            StoredMaterial = (MaterialType) decoder.ReadEncodeable("StoredMaterial", typeof(MaterialType));
            EUInfo = (EUInformation) decoder.ReadEncodeable("EUInfo", typeof(EUInformation));
            TotalStorageCapacity = decoder.ReadDouble("TotalStorageCapacity");
            StorageLogic = (StorageLogicEnumeration) decoder.ReadEnumerated("StorageLogic", typeof(StorageLogicEnumeration));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MaterialStorageBufferDataType value = encodeable as MaterialStorageBufferDataType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ID, value.m_ID)) return false;
            if (!Utils.IsEqual(m_MES_ID, value.m_MES_ID)) return false;
            if (!Utils.IsEqual(m_StoredMaterial, value.m_StoredMaterial)) return false;
            if (!Utils.IsEqual(m_EUInfo, value.m_EUInfo)) return false;
            if (!Utils.IsEqual(m_TotalStorageCapacity, value.m_TotalStorageCapacity)) return false;
            if (!Utils.IsEqual(m_StorageLogic, value.m_StorageLogic)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            MaterialStorageBufferDataType clone = (MaterialStorageBufferDataType)this.MemberwiseClone();

            clone.m_ID = (string)Utils.Clone(this.m_ID);
            clone.m_MES_ID = (string)Utils.Clone(this.m_MES_ID);
            clone.m_StoredMaterial = (MaterialType)Utils.Clone(this.m_StoredMaterial);
            clone.m_EUInfo = (EUInformation)Utils.Clone(this.m_EUInfo);
            clone.m_TotalStorageCapacity = (double)Utils.Clone(this.m_TotalStorageCapacity);
            clone.m_StorageLogic = (StorageLogicEnumeration)Utils.Clone(this.m_StorageLogic);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ID;
        private string m_MES_ID;
        private MaterialType m_StoredMaterial;
        private EUInformation m_EUInfo;
        private double m_TotalStorageCapacity;
        private StorageLogicEnumeration m_StorageLogic;
        #endregion
    }

    #region MaterialStorageBufferDataTypeCollection class
    /// <summary>
    /// A collection of MaterialStorageBufferDataType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfMaterialStorageBufferDataType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "MaterialStorageBufferDataType")]
    public partial class MaterialStorageBufferDataTypeCollection : List<MaterialStorageBufferDataType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MaterialStorageBufferDataTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MaterialStorageBufferDataTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MaterialStorageBufferDataTypeCollection(IEnumerable<MaterialStorageBufferDataType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MaterialStorageBufferDataTypeCollection(MaterialStorageBufferDataType[] values)
        {
            if (values != null)
            {
                return new MaterialStorageBufferDataTypeCollection(values);
            }

            return new MaterialStorageBufferDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MaterialStorageBufferDataType[](MaterialStorageBufferDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            MaterialStorageBufferDataTypeCollection clone = new MaterialStorageBufferDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MaterialStorageBufferDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region MaterialType Class
    /// <summary>
    /// Describes a material (raw, semi, finished) in the production process.The information shall be made consistent with the ERP system's description.
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class MaterialType : IEncodeable
    {
        #region Constructors
        public MaterialType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Group = null;
            m_MaterialId = null;
            m_BatchId = null;
            m_Description = null;
            m_MES_Id = null;
            m_BaseUoM = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Group", IsRequired = false, Order = 1)]
        public string Group
        {
            get
            {
                return m_Group;
            }
            set
            {
                m_Group = value;
            }
        }
        [DataMember(Name = "MaterialId", IsRequired = false, Order = 2)]
        public string MaterialId
        {
            get
            {
                return m_MaterialId;
            }
            set
            {
                m_MaterialId = value;
            }
        }
        [DataMember(Name = "BatchId", IsRequired = false, Order = 3)]
        public string BatchId
        {
            get
            {
                return m_BatchId;
            }
            set
            {
                m_BatchId = value;
            }
        }
        [DataMember(Name = "Description", IsRequired = false, Order = 4)]
        public LocalizedText Description
        {
            get
            {
                return m_Description;
            }
            set
            {
                m_Description = value;
            }
        }
        [DataMember(Name = "MES_Id", IsRequired = false, Order = 5)]
        public string MES_Id
        {
            get
            {
                return m_MES_Id;
            }
            set
            {
                m_MES_Id = value;
            }
        }
        [DataMember(Name = "BaseUoM", IsRequired = false, Order = 6)]
        public EUInformation BaseUoM
        {
            get
            {
                return m_BaseUoM;
            }
            set
            {
                m_BaseUoM = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MaterialType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MaterialType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MaterialType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("Group", Group);
            encoder.WriteString("MaterialId", MaterialId);
            encoder.WriteString("BatchId", BatchId);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteString("MES_Id", MES_Id);
            encoder.WriteEncodeable("BaseUoM", BaseUoM, typeof(EUInformation));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            Group = decoder.ReadString("Group");
            MaterialId = decoder.ReadString("MaterialId");
            BatchId = decoder.ReadString("BatchId");
            Description = decoder.ReadLocalizedText("Description");
            MES_Id = decoder.ReadString("MES_Id");
            BaseUoM = (EUInformation) decoder.ReadEncodeable("BaseUoM", typeof(EUInformation));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MaterialType value = encodeable as MaterialType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Group, value.m_Group)) return false;
            if (!Utils.IsEqual(m_MaterialId, value.m_MaterialId)) return false;
            if (!Utils.IsEqual(m_BatchId, value.m_BatchId)) return false;
            if (!Utils.IsEqual(m_Description, value.m_Description)) return false;
            if (!Utils.IsEqual(m_MES_Id, value.m_MES_Id)) return false;
            if (!Utils.IsEqual(m_BaseUoM, value.m_BaseUoM)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            MaterialType clone = (MaterialType)this.MemberwiseClone();

            clone.m_Group = (string)Utils.Clone(this.m_Group);
            clone.m_MaterialId = (string)Utils.Clone(this.m_MaterialId);
            clone.m_BatchId = (string)Utils.Clone(this.m_BatchId);
            clone.m_Description = (LocalizedText)Utils.Clone(this.m_Description);
            clone.m_MES_Id = (string)Utils.Clone(this.m_MES_Id);
            clone.m_BaseUoM = (EUInformation)Utils.Clone(this.m_BaseUoM);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Group;
        private string m_MaterialId;
        private string m_BatchId;
        private LocalizedText m_Description;
        private string m_MES_Id;
        private EUInformation m_BaseUoM;
        #endregion
    }

    #region MaterialTypeCollection class
    /// <summary>
    /// A collection of MaterialType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfMaterialType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "MaterialType")]
    public partial class MaterialTypeCollection : List<MaterialType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MaterialTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MaterialTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MaterialTypeCollection(IEnumerable<MaterialType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MaterialTypeCollection(MaterialType[] values)
        {
            if (values != null)
            {
                return new MaterialTypeCollection(values);
            }

            return new MaterialTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MaterialType[](MaterialTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            MaterialTypeCollection clone = new MaterialTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MaterialType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region MessageType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class MessageType : IEncodeable
    {
        #region Constructors
        public MessageType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_ID = null;
            m_LocalText = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "ID", IsRequired = false, Order = 1)]
        public string ID
        {
            get
            {
                return m_ID;
            }
            set
            {
                m_ID = value;
            }
        }
        [DataMember(Name = "LocalText", IsRequired = false, Order = 2)]
        public LocalizedText LocalText
        {
            get
            {
                return m_LocalText;
            }
            set
            {
                m_LocalText = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MessageType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MessageType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MessageType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("ID", ID);
            encoder.WriteLocalizedText("LocalText", LocalText);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            ID = decoder.ReadString("ID");
            LocalText = decoder.ReadLocalizedText("LocalText");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MessageType value = encodeable as MessageType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_ID, value.m_ID)) return false;
            if (!Utils.IsEqual(m_LocalText, value.m_LocalText)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            MessageType clone = (MessageType)this.MemberwiseClone();

            clone.m_ID = (string)Utils.Clone(this.m_ID);
            clone.m_LocalText = (LocalizedText)Utils.Clone(this.m_LocalText);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_ID;
        private LocalizedText m_LocalText;
        #endregion
    }

    #region MessageTypeCollection class
    /// <summary>
    /// A collection of MessageType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfMessageType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "MessageType")]
    public partial class MessageTypeCollection : List<MessageType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MessageTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MessageTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MessageTypeCollection(IEnumerable<MessageType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MessageTypeCollection(MessageType[] values)
        {
            if (values != null)
            {
                return new MessageTypeCollection(values);
            }

            return new MessageTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MessageType[](MessageTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            MessageTypeCollection clone = new MessageTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MessageType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region RootCauseMessageType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class RootCauseMessageType : MessageType
    {
        #region Constructors
        public RootCauseMessageType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_GroupId = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "GroupId", IsRequired = false, Order = 1)]
        public string GroupId
        {
            get
            {
                return m_GroupId;
            }
            set
            {
                m_GroupId = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RootCauseMessageType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RootCauseMessageType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RootCauseMessageType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("GroupId", GroupId);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Namespaces.TMCXsd);
            GroupId = decoder.ReadString("GroupId");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RootCauseMessageType value = encodeable as RootCauseMessageType;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;

            if (!Utils.IsEqual(m_GroupId, value.m_GroupId)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public override object Clone()
        {
            RootCauseMessageType clone = (RootCauseMessageType)base.Clone();

            clone.m_GroupId = (string)Utils.Clone(this.m_GroupId);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_GroupId;
        #endregion
    }

    #region RootCauseMessageTypeCollection class
    /// <summary>
    /// A collection of RootCauseMessageType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfRootCauseMessageType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "RootCauseMessageType")]
    public partial class RootCauseMessageTypeCollection : List<RootCauseMessageType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public RootCauseMessageTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public RootCauseMessageTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public RootCauseMessageTypeCollection(IEnumerable<RootCauseMessageType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator RootCauseMessageTypeCollection(RootCauseMessageType[] values)
        {
            if (values != null)
            {
                return new RootCauseMessageTypeCollection(values);
            }

            return new RootCauseMessageTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator RootCauseMessageType[](RootCauseMessageTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            RootCauseMessageTypeCollection clone = new RootCauseMessageTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((RootCauseMessageType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region MethodExecutionFeedbackType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class MethodExecutionFeedbackType : IEncodeable
    {
        #region Constructors
        public MethodExecutionFeedbackType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Success = false;
            m_Message = new MessageTypeCollection();
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Success", IsRequired = false, Order = 1)]
        public bool Success
        {
            get
            {
                return m_Success;
            }
            set
            {
                m_Success = value;
            }
        }
        [DataMember(Name = "Message", IsRequired = false, Order = 2)]
        public MessageTypeCollection Message
        {
            get
            {
                return m_Message;
            }
            set
            {
                m_Message = value;

                if (value == null)
                {
                    m_Message = new MessageTypeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MethodExecutionFeedbackType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MethodExecutionFeedbackType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MethodExecutionFeedbackType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteBoolean("Success", Success);
            encoder.WriteEncodeableArray("Message", Message.ToArray(), typeof(MessageType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            Success = decoder.ReadBoolean("Success");
            Message = (MessageTypeCollection) decoder.ReadEncodeableArray("Message", typeof(MessageType));

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MethodExecutionFeedbackType value = encodeable as MethodExecutionFeedbackType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Success, value.m_Success)) return false;
            if (!Utils.IsEqual(m_Message, value.m_Message)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            MethodExecutionFeedbackType clone = (MethodExecutionFeedbackType)this.MemberwiseClone();

            clone.m_Success = (bool)Utils.Clone(this.m_Success);
            clone.m_Message = (MessageTypeCollection)Utils.Clone(this.m_Message);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_Success;
        private MessageTypeCollection m_Message;
        #endregion
    }

    #region MethodExecutionFeedbackTypeCollection class
    /// <summary>
    /// A collection of MethodExecutionFeedbackType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfMethodExecutionFeedbackType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "MethodExecutionFeedbackType")]
    public partial class MethodExecutionFeedbackTypeCollection : List<MethodExecutionFeedbackType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MethodExecutionFeedbackTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MethodExecutionFeedbackTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MethodExecutionFeedbackTypeCollection(IEnumerable<MethodExecutionFeedbackType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MethodExecutionFeedbackTypeCollection(MethodExecutionFeedbackType[] values)
        {
            if (values != null)
            {
                return new MethodExecutionFeedbackTypeCollection(values);
            }

            return new MethodExecutionFeedbackTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MethodExecutionFeedbackType[](MethodExecutionFeedbackTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            MethodExecutionFeedbackTypeCollection clone = new MethodExecutionFeedbackTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MethodExecutionFeedbackType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region POType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class POType : IEncodeable
    {
        #region Constructors
        public POType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Number = null;
            m_ProducedMaterial = null;
            m_TargetQuantity = 0.0;
            m_ContinueAtJobEnd = false;
            m_TargetStartTime = DateTime.MinValue;
            m_TargetEndTime = DateTime.MinValue;
            m_DatasetId = null;
            m_DatasetDescription = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Number", IsRequired = false, Order = 1)]
        public string Number
        {
            get
            {
                return m_Number;
            }
            set
            {
                m_Number = value;
            }
        }
        [DataMember(Name = "ProducedMaterial", IsRequired = false, Order = 2)]
        public MaterialType ProducedMaterial
        {
            get
            {
                return m_ProducedMaterial;
            }
            set
            {
                m_ProducedMaterial = value;
            }
        }
        [DataMember(Name = "TargetQuantity", IsRequired = false, Order = 3)]
        public double TargetQuantity
        {
            get
            {
                return m_TargetQuantity;
            }
            set
            {
                m_TargetQuantity = value;
            }
        }
        [DataMember(Name = "ContinueAtJobEnd", IsRequired = false, Order = 4)]
        public bool ContinueAtJobEnd
        {
            get
            {
                return m_ContinueAtJobEnd;
            }
            set
            {
                m_ContinueAtJobEnd = value;
            }
        }
        [DataMember(Name = "TargetStartTime", IsRequired = false, Order = 5)]
        public DateTime TargetStartTime
        {
            get
            {
                return m_TargetStartTime;
            }
            set
            {
                m_TargetStartTime = value;
            }
        }
        [DataMember(Name = "TargetEndTime", IsRequired = false, Order = 6)]
        public DateTime TargetEndTime
        {
            get
            {
                return m_TargetEndTime;
            }
            set
            {
                m_TargetEndTime = value;
            }
        }
        [DataMember(Name = "DatasetId", IsRequired = false, Order = 7)]
        public string DatasetId
        {
            get
            {
                return m_DatasetId;
            }
            set
            {
                m_DatasetId = value;
            }
        }
        [DataMember(Name = "DatasetDescription", IsRequired = false, Order = 8)]
        public string DatasetDescription
        {
            get
            {
                return m_DatasetDescription;
            }
            set
            {
                m_DatasetDescription = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.POType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.POType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.POType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("Number", Number);
            encoder.WriteEncodeable("ProducedMaterial", ProducedMaterial, typeof(MaterialType));
            encoder.WriteDouble("TargetQuantity", TargetQuantity);
            encoder.WriteBoolean("ContinueAtJobEnd", ContinueAtJobEnd);
            encoder.WriteDateTime("TargetStartTime", TargetStartTime);
            encoder.WriteDateTime("TargetEndTime", TargetEndTime);
            encoder.WriteString("DatasetId", DatasetId);
            encoder.WriteString("DatasetDescription", DatasetDescription);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            Number = decoder.ReadString("Number");
            ProducedMaterial = (MaterialType) decoder.ReadEncodeable("ProducedMaterial", typeof(MaterialType));
            TargetQuantity = decoder.ReadDouble("TargetQuantity");
            ContinueAtJobEnd = decoder.ReadBoolean("ContinueAtJobEnd");
            TargetStartTime = decoder.ReadDateTime("TargetStartTime");
            TargetEndTime = decoder.ReadDateTime("TargetEndTime");
            DatasetId = decoder.ReadString("DatasetId");
            DatasetDescription = decoder.ReadString("DatasetDescription");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            POType value = encodeable as POType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Number, value.m_Number)) return false;
            if (!Utils.IsEqual(m_ProducedMaterial, value.m_ProducedMaterial)) return false;
            if (!Utils.IsEqual(m_TargetQuantity, value.m_TargetQuantity)) return false;
            if (!Utils.IsEqual(m_ContinueAtJobEnd, value.m_ContinueAtJobEnd)) return false;
            if (!Utils.IsEqual(m_TargetStartTime, value.m_TargetStartTime)) return false;
            if (!Utils.IsEqual(m_TargetEndTime, value.m_TargetEndTime)) return false;
            if (!Utils.IsEqual(m_DatasetId, value.m_DatasetId)) return false;
            if (!Utils.IsEqual(m_DatasetDescription, value.m_DatasetDescription)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            POType clone = (POType)this.MemberwiseClone();

            clone.m_Number = (string)Utils.Clone(this.m_Number);
            clone.m_ProducedMaterial = (MaterialType)Utils.Clone(this.m_ProducedMaterial);
            clone.m_TargetQuantity = (double)Utils.Clone(this.m_TargetQuantity);
            clone.m_ContinueAtJobEnd = (bool)Utils.Clone(this.m_ContinueAtJobEnd);
            clone.m_TargetStartTime = (DateTime)Utils.Clone(this.m_TargetStartTime);
            clone.m_TargetEndTime = (DateTime)Utils.Clone(this.m_TargetEndTime);
            clone.m_DatasetId = (string)Utils.Clone(this.m_DatasetId);
            clone.m_DatasetDescription = (string)Utils.Clone(this.m_DatasetDescription);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Number;
        private MaterialType m_ProducedMaterial;
        private double m_TargetQuantity;
        private bool m_ContinueAtJobEnd;
        private DateTime m_TargetStartTime;
        private DateTime m_TargetEndTime;
        private string m_DatasetId;
        private string m_DatasetDescription;
        #endregion
    }

    #region POTypeCollection class
    /// <summary>
    /// A collection of POType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfPOType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "POType")]
    public partial class POTypeCollection : List<POType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public POTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public POTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public POTypeCollection(IEnumerable<POType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator POTypeCollection(POType[] values)
        {
            if (values != null)
            {
                return new POTypeCollection(values);
            }

            return new POTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator POType[](POTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            POTypeCollection clone = new POTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((POType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

    #region RootCauseGroupType Class
    /// <summary>
    /// </summary>
    [DataContract(Namespace = TMCGroup.TMC.Namespaces.TMCXsd)]
    public partial class RootCauseGroupType : IEncodeable
    {
        #region Constructors
        public RootCauseGroupType()
        {
            Initialize();
        }

        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        private void Initialize()
        {
            m_Id = null;
            m_ParentId = null;
            m_Description = null;
        }
        #endregion

        #region Public Properties
        [DataMember(Name = "Id", IsRequired = false, Order = 1)]
        public string Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }
        [DataMember(Name = "ParentId", IsRequired = false, Order = 2)]
        public string ParentId
        {
            get
            {
                return m_ParentId;
            }
            set
            {
                m_ParentId = value;
            }
        }
        [DataMember(Name = "Description", IsRequired = false, Order = 3)]
        public LocalizedText Description
        {
            get
            {
                return m_Description;
            }
            set
            {
                m_Description = value;
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RootCauseGroupType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RootCauseGroupType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RootCauseGroupType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Namespaces.TMCXsd);

            encoder.WriteString("Id", Id);
            encoder.WriteString("ParentId", ParentId);
            encoder.WriteLocalizedText("Description", Description);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Namespaces.TMCXsd);
            Id = decoder.ReadString("Id");
            ParentId = decoder.ReadString("ParentId");
            Description = decoder.ReadLocalizedText("Description");

            decoder.PopNamespace();
        }

        /// <summary cref="EncodeableObject.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RootCauseGroupType value = encodeable as RootCauseGroupType;

            if (value == null)
            {
                return false;
            }
            if (!Utils.IsEqual(m_Id, value.m_Id)) return false;
            if (!Utils.IsEqual(m_ParentId, value.m_ParentId)) return false;
            if (!Utils.IsEqual(m_Description, value.m_Description)) return false;

            return true;
        }

        /// <summary cref="ICloneable.Clone" />
        public virtual object Clone()
        {
            RootCauseGroupType clone = (RootCauseGroupType)this.MemberwiseClone();

            clone.m_Id = (string)Utils.Clone(this.m_Id);
            clone.m_ParentId = (string)Utils.Clone(this.m_ParentId);
            clone.m_Description = (LocalizedText)Utils.Clone(this.m_Description);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_Id;
        private string m_ParentId;
        private LocalizedText m_Description;
        #endregion
    }

    #region RootCauseGroupTypeCollection class
    /// <summary>
    /// A collection of RootCauseGroupType objects.
    /// </summary>
    [CollectionDataContract(Name = "ListOfRootCauseGroupType", Namespace = TMCGroup.TMC.Namespaces.TMC, ItemName = "RootCauseGroupType")]
    public partial class RootCauseGroupTypeCollection : List<RootCauseGroupType>, ICloneable
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public RootCauseGroupTypeCollection() { }

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public RootCauseGroupTypeCollection(int capacity) : base(capacity) { }

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public RootCauseGroupTypeCollection(IEnumerable<RootCauseGroupType> collection) : base(collection) { }
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator RootCauseGroupTypeCollection(RootCauseGroupType[] values)
        {
            if (values != null)
            {
                return new RootCauseGroupTypeCollection(values);
            }

            return new RootCauseGroupTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator RootCauseGroupType[](RootCauseGroupTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        #region ICloneable Methods
        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public object Clone()
        {
            RootCauseGroupTypeCollection clone = new RootCauseGroupTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((RootCauseGroupType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endregion
    #endregion

}
